//
//  XMGTopicViewController.swift
//  4jchc-BaiSiBuDeJie
//
//  Created by ËíãËøõ on 16/2/22.
//  Copyright ¬© 2016Âπ¥ ËíãËøõ. All rights reserved.
//

import UIKit
import SVProgressHUD
import MJExtension
import MJRefresh


enum XMGTopicType:Int {
    case All = 1
    case Picture = 10
    case Word = 29
    case Voice = 31
    case Video = 41
}

class XMGTopicViewController: UITableViewController {
    

    /** Â∏ñÂ≠êÁ±ªÂûã(‰∫§ÁªôÂ≠êÁ±ªÂéªÂÆûÁé∞) */

    var type: XMGTopicType?
        

        

    
    let XMGTopicCellId:String = "topic"
    /** ÂΩìÂâçÈ°µÁ†Å */
    var page: Int = 0
    /** ÂΩìÂä†ËΩΩ‰∏ã‰∏ÄÈ°µÊï∞ÊçÆÊó∂ÈúÄË¶ÅËøô‰∏™ÂèÇÊï∞ */
    var maxtime: String?
    /** ‰∏ä‰∏ÄÊ¨°ÁöÑËØ∑Ê±ÇÂèÇÊï∞ */
    var params: NSDictionary?
    /** Â∏ñÂ≠êÊï∞ÊçÆ */
    lazy var topics = NSMutableArray()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        /// ÂàùÂßãÂåñË°®Ê†º
        setupTableView()
        /// Ê∑ªÂä†Âà∑Êñ∞Êéß‰ª∂
        setupRefresh()
        
    }
    /// ÂàùÂßãÂåñË°®Ê†º
    func setupTableView() {
        
        // ËÆæÁΩÆÂÜÖËæπË∑ù
        let bottom:CGFloat = self.tabBarController!.tabBar.height;
        let top:CGFloat = XMGTitilesViewY + XMGTitilesViewH;
        self.tableView.contentInset = UIEdgeInsetsMake(top, 0, bottom, 0);
        // ËÆæÁΩÆÊªöÂä®Êù°ÁöÑÂÜÖËæπË∑ù
        self.tableView.scrollIndicatorInsets = self.tableView.contentInset;
        self.tableView.separatorStyle = UITableViewCellSeparatorStyle.None;
        self.tableView.backgroundColor = UIColor.clearColor()
        
        // Ê≥®ÂÜåcell
        self.tableView.registerNib(UINib(nibName: "XMGTopicCell", bundle: nil), forCellReuseIdentifier: XMGTopicCellId)
        
        
    }
    //MARK:  Ê∑ªÂä†Âà∑Êñ∞Êéß‰ª∂
    ///  Ê∑ªÂä†Âà∑Êñ∞Êéß‰ª∂
    func setupRefresh(){
        
        self.tableView.mj_header = MJRefreshNormalHeader(refreshingTarget: self, refreshingAction: Selector("loadNewTopics"))
        
        self.tableView.mj_footer = MJRefreshBackNormalFooter(refreshingTarget: self, refreshingAction: Selector("loadMoreTopics"))
        
        // Ëá™Âä®ÊîπÂèòÈÄèÊòéÂ∫¶
        self.tableView.mj_header.automaticallyChangeAlpha = true
        // ËÆ©Áî®Êà∑Ë°®Ê†ºËøõÂÖ•‰∏ãÊãâÂà∑Êñ∞Áä∂ÊÄÅ
        self.tableView.mj_header.beginRefreshing()
        
    }
    
    /// Âä†ËΩΩÊñ∞ÁöÑÂ∏ñÂ≠êÊï∞ÊçÆ
    func loadNewTopics(){
        
        // ÁªìÊùü‰∏äÂï¶
        self.tableView.mj_footer.endRefreshing()
        // 1.ÂÆö‰πâURLË∑ØÂæÑ
        let path = "api/api_open.php"
        // 2.Â∞ÅË£ÖÂèÇÊï∞
        let params = NSMutableDictionary()
        params["a"] = "list";
        params["c"] = "data";
        params["type"] = self.type?.rawValue
        //.Â≠òÂÇ®ËØ∑Ê±ÇÂèÇÊï∞.Âà§Êñ≠2Ê¨°ËØ∑Ê±ÇÂèÇÊï∞ÊòØÂê¶Áõ∏Âêå.‰∏çÂêåÂ∞±Áõ¥Êé•ËøîÂõû
        self.params = params
        NetworkTools.shareNetworkTools().sendGET(path, params: params, successCallback: { (responseObject) -> () in
            if (self.params != params) {return}
            (responseObject as! NSDictionary).writeToFile("/Users/jiangjin/Desktop/duanziüíó.plist", atomically: true)
            
            // Â≠òÂÇ®maxtime
            self.maxtime = (responseObject["info"] as! NSDictionary)["maxtime"] as? String
            
            // ÊúçÂä°Âô®ËøîÂõûÁöÑJSONÊï∞ÊçÆ- Â≠óÂÖ∏Êï∞ÁªÑ -> Ê®°ÂûãÊï∞ÁªÑ
            self.topics = XMGTopic.mj_objectArrayWithKeyValuesArray(responseObject["list"])
            
            // Âà∑Êñ∞Ë°®Ê†º
            self.tableView.reloadData()
            
            // ÁªìÊùüÂà∑Êñ∞
            self.tableView.mj_header.endRefreshing()
            
            // Ê∏ÖÁ©∫È°µÁ†Å
            self.page = 0;
            
            }) { (error) -> () in
                
                // ‰∏çÊòØÊúÄÂêé‰∏ÄÊ¨°ËØ∑Ê±Ç
                if (self.params != params) {return}
                // ÊòæÁ§∫Â§±Ë¥•‰ø°ÊÅØ
                SVProgressHUD.showErrorWithStatus("Âä†ËΩΩÊé®Ëçê‰ø°ÊÅØÂ§±Ë¥•!")
                // ËÆ©Â∫ïÈÉ®Êéß‰ª∂ÁªìÊùüÂà∑Êñ∞
                self.tableView.mj_header.endRefreshing()
        }
    }
    
    // ÂÖà‰∏ãÊãâÂà∑Êñ∞, ÂÜç‰∏äÊãâÂà∑Êñ∞Á¨¨5È°µÊï∞ÊçÆ
    
    // ‰∏ãÊãâÂà∑Êñ∞ÊàêÂäüÂõûÊù•: Âè™Êúâ‰∏ÄÈ°µÊï∞ÊçÆ, page == 0
    // ‰∏äÂï¶Âà∑Êñ∞ÊàêÂäüÂõûÊù•: ÊúÄÂâçÈù¢ÈÇ£È°µ + Á¨¨5È°µÊï∞ÊçÆ
    
    /// Âä†ËΩΩÊõ¥Â§öÁöÑÂ∏ñÂ≠êÊï∞ÊçÆ
    func loadMoreTopics(){
        
        // ÁªìÊùü‰∏ãÊãâ
        self.tableView.mj_header.endRefreshing()
        
        // 1.ÂÆö‰πâURLË∑ØÂæÑ
        let path = "api/api_open.php"
        // 2.Â∞ÅË£ÖÂèÇÊï∞
        let params = NSMutableDictionary()
        params["a"] = "list";
        params["c"] = "data";
        params["type"] = self.type?.rawValue
        // ÂΩìÂâçÁöÑÁ¥¢Âºï
        let page:Int = self.page + 1
        params["page"] = page
        params["maxtime"] = self.maxtime;
        //.Â≠òÂÇ®ËØ∑Ê±ÇÂèÇÊï∞.Âà§Êñ≠2Ê¨°ËØ∑Ê±ÇÂèÇÊï∞ÊòØÂê¶Áõ∏Âêå.‰∏çÂêåÂ∞±Áõ¥Êé•ËøîÂõû
        self.params = params
        NetworkTools.shareNetworkTools().sendGET(path, params: params, successCallback: { (responseObject) -> () in
            // Âçï‰∏™ÁöÑcellÂ∞±Áõ¥Êé•‰∏çÂä†ËΩΩÊï∞ÊçÆ
            // Â¶ÇÊûúÊòØÂ§ö‰∏™cellÂ∞±ÂÖàËΩ¨ÊàêÊ®°ÂûãÁÑ∂ÂêéËøîÂõû--‰∏çÂà∑Êñ∞Êï∞ÊçÆ
            if (self.params != params) {return}
            
            // Â≠òÂÇ®maxtime
            self.maxtime = (responseObject["info"] as! NSDictionary)["maxtime"] as? String
            
            // ÊúçÂä°Âô®ËøîÂõûÁöÑJSONÊï∞ÊçÆ- Â≠óÂÖ∏Êï∞ÁªÑ -> Ê®°ÂûãÊï∞ÁªÑ
            let newTopics:NSArray = XMGTopic.mj_objectArrayWithKeyValuesArray(responseObject["list"])
            self.topics.addObjectsFromArray(newTopics as [AnyObject])
            // Âà∑Êñ∞Ë°®Ê†º
            self.tableView.reloadData()
            
            // ÁªìÊùüÂà∑Êñ∞
            self.tableView.mj_footer.endRefreshing()
            // ËÆæÁΩÆÈ°µÁ†Å
            self.page = page
            }) { (error) -> () in
                // ‰∏çÊòØÊúÄÂêé‰∏ÄÊ¨°ËØ∑Ê±Ç
                if (self.params != params) {return}
                // ÊòæÁ§∫Â§±Ë¥•‰ø°ÊÅØ
                SVProgressHUD.showErrorWithStatus("Âä†ËΩΩÊé®Ëçê‰ø°ÊÅØÂ§±Ë¥•!")
                // ËÆ©Â∫ïÈÉ®Êéß‰ª∂ÁªìÊùüÂà∑Êñ∞
                self.tableView.mj_footer.endRefreshing()
        }
    }
    
    // MARK: - Êï∞ÊçÆÊ∫êÊñπÊ≥ï
    override func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        // #warning Incomplete implementation, return the number of rows
        self.tableView.mj_footer.hidden = (self.topics.count == 0);
        return self.topics.count ?? 0
    }
    
    
    override func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {
        
        let cell = tableView.dequeueReusableCellWithIdentifier(XMGTopicCellId) as! XMGTopicCell
        cell.topic = self.topics[indexPath.row] as? XMGTopic
        
        return cell
    }
    // MARK: - ‰ª£ÁêÜÊñπÊ≥ï
    override func tableView(tableView: UITableView, heightForRowAtIndexPath indexPath: NSIndexPath) -> CGFloat {
        
        // ÂèñÂá∫Â∏ñÂ≠êÊ®°Âûã
        let topic = self.topics[indexPath.row] as! XMGTopic;
        
        /*
        // ÊñáÂ≠óÁöÑÊúÄÂ§ßÂ∞∫ÂØ∏
        let maxSize:CGSize = CGSizeMake(UIScreen.mainScreen().bounds.size.width - 4 * XMGTopicCellMargin, CGFloat(MAXFLOAT))

        let textH:CGFloat = (topic.text! as NSString).boundingRectWithSize(maxSize, options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: [NSFontAttributeName:UIFont.systemFontOfSize(14)], context: nil).size.height

        // cellÁöÑÈ´òÂ∫¶
        let cellH:CGFloat = XMGTopicCellTextY + textH + XMGTopicCellBottomBarH + 2 * XMGTopicCellMargin;
        */
        return topic.cellHeight
    }
    override func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {
        
        // ÂºπÂá∫Â∏¶Nav
        let commentVc = XMGCommentViewController()

        commentVc.topic = self.topics[indexPath.row] as! XMGTopic;
        self.navigationController?.pushViewController(commentVc, animated: true)
        
    }

}
